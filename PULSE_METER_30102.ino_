#include "Arduino.h"

#include <Arduino.h>
#include <math.h>
#include <Wire.h>
#include <U8g2lib.h>
#include <MAX30105.h>
#include <DigisparkJQ6500.h>
#include <SoftwareSerial.h>
#include "ESP8266WiFi.h"

#include "MAX301xxFilter.h"

MAX30105 * pulseSensor;

void setCurrents(uint8_t red, uint8_t ir)
{
	pulseSensor->setPulseAmplitudeRed(red);
	pulseSensor->setPulseAmplitudeIR(ir);
}

MAX301xxFilter filter(0x0A, 0x1F, setCurrents);

U8G2_SSD1306_128X32_UNIVISION_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ 16, /* clock=*/ 5, /* data=*/ 4); // @suppress("Abstract class cannot be instantiated")

#define BusyState 15 // пин BUSY плеера
#define POWER_OFF_PIN 2

SoftwareSerial swSer(14, 12); // @suppress("Abstract class cannot be instantiated")

JQ6500_Serial mp3(&swSer);

#define CIRCULAR_BUFFER_SIZE 5
#define LOOP_DELAY_MS 12

int counts[CIRCULAR_BUFFER_SIZE];
int beatCount = 0;

int lastTalk;
int lastMeasurement;

bool enableDisplay = false;


void setup()
{
	pinMode(BusyState,INPUT);
	pinMode(POWER_OFF_PIN, OUTPUT);

	digitalWrite(POWER_OFF_PIN, HIGH);

	Wire.begin();
	Serial.begin(9600);
	swSer.begin(9600);
	Serial.println("Pulse oxymeter test!");

	//pulseOxymeter = new MAX30100();
	pulseSensor = new MAX30105();

	if (!pulseSensor->begin()) //Use default I2C port and speed
	{
		Serial.println("MAX30105 was not found. Please check wiring/power. ");
		while (1);
	}

	pulseSensor->setup(); //Configure sensor with default settings
	pulseSensor->setPulseAmplitudeRed(0x0A); //Turn Red LED to low to indicate sensor is running
	pulseSensor->setPulseAmplitudeGreen(0); //Turn off Green LED

	Serial.println("Configuring: display");

	u8g2.begin();
	u8g2.setFont(u8g2_font_logisoso32_tf); // set the target font to calculate the pixel width
	u8g2.setFontMode(0);    // enable transparent mode, which is faster

	Serial.println("Configuring: mp3");

	mp3.setVolume(10);

	Serial.println("Configuring: wifi");

	WiFi.disconnect();
	WiFi.mode(WIFI_OFF);
	WiFi.forceSleepBegin();

	lastMeasurement = millis();

	Serial.println("Configuring: setup done");
}


void loop()
{
	// You have to call update with frequency at least 37Hz.
	// But the closer you call it to 100Hz the better, the filter will work.

	int t_Start = millis();

	long irValue = pulseSensor->getIR();
	long redValue = pulseSensor->getRed();

	Serial.print("IR=");Serial.print(irValue);Serial.print(";RED=");Serial.println(redValue);

	pulseoxymeter_t result = filter.update(redValue, irValue);

	if(result.pulseDetected)
	{
		Serial.println(result.heartBPM);

		beatCount = (++beatCount) % CIRCULAR_BUFFER_SIZE;
		counts[beatCount] = round(result.heartBPM);

		if (beatCount >= CIRCULAR_BUFFER_SIZE - 1) enableDisplay = true; // We will display something after CIRCULAR_BUFFER_SIZE beats

		if (enableDisplay)
		{
			u8g2.firstPage();
			do
			{
				u8g2.setCursor(0, 32);
				u8g2.print(result.heartBPM, 1);
			} while ( u8g2.nextPage() );
		}

		int minCount = 10000, maxCount = -10000;

		for (int i = 0; i < CIRCULAR_BUFFER_SIZE; i++)
		{
			minCount = min(minCount, counts[i]);
			maxCount = max(maxCount, counts[i]);
		}

		if (maxCount - minCount < 4)
		{
			if (!digitalRead(BusyState))
			{
				if (millis() - lastTalk > 5000)
				{
					mp3.playFileByIndexNumber(round(result.heartBPM) - 40);
					lastTalk = millis();
				}
			}
		}

		lastMeasurement = millis();
	}

	if (millis() - lastMeasurement > 15000)
	{
		digitalWrite(POWER_OFF_PIN, LOW);
	}

	int t_End = millis();

	if (t_End >= t_Start && (t_End - t_Start < LOOP_DELAY_MS))
	{
		delay(LOOP_DELAY_MS - (t_End - t_Start));
	}
	else
	{
		delay(LOOP_DELAY_MS);
	}
}






